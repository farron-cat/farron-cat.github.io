import{_ as d,C as s,c as m,o as f,ae as r,j as i,G as o,a as u,w as t}from"./chunks/framework.U1Gow_7P.js";const _=JSON.parse('{"title":"第七章 查找","description":"","frontmatter":{},"headers":[],"relativePath":"programming/data_structure/chap7.md","filePath":"programming/data_structure/chap7.md"}'),A={name:"programming/data_structure/chap7.md"};function T(p,l,S,C,B,g){const n=s("font");return f(),m("div",null,[l[54]||(l[54]=r('<h1 id="第七章-查找" tabindex="-1">第七章 查找 <a class="header-anchor" href="#第七章-查找" aria-label="Permalink to &quot;第七章 查找&quot;">​</a></h1><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><ul><li>查找</li><li>查找表 <ul><li>用于查找的数据集合</li></ul></li><li>静态查找表 <ul><li>操作只涉及查询检索，无需动态修改查找表</li></ul></li><li>动态查找表 <ul><li>需要动态插入或删除的查找表</li></ul></li><li>关键字 <ul><li>数据元素中唯一标识该元素的某个数据项的值</li></ul></li><li>静态查找</li><li>动态查找</li><li>平均查找长度 ASL <ul><li>查找过程中比较次数的平均值</li><li>是查找算法效率指标</li><li>查找成功情况下</li><li>查找失败情况下</li></ul></li></ul><h2 id="线性结构" tabindex="-1">线性结构 <a class="header-anchor" href="#线性结构" aria-label="Permalink to &quot;线性结构&quot;">​</a></h2><ul><li>顺序查找 含哨兵 ![图片](./第七章 查找-幕布图片-161128-439081.jpg) <ul><li>ASL <ul><li>成功</li><li>失败</li></ul></li><li>优化 <ul><li>让关键字有序，降低查找失败的ASL</li><li>让关键字按被查找概率从大到小排序，降低查找成功的ASL</li></ul></li></ul></li><li>折半查找 升序 ![图片](./第七章 查找-幕布图片-558401-240416.jpg) <ul><li>只适用于有序的顺序表</li><li>折半查找判定树 <ul><li>前提：mid向下取整</li><li>右子树结点数-左子树结点数=0或1 <ul><li>左比右少</li></ul></li><li>画法：先放右子树，一行满了再放左子树，从右往左放</li><li>树高和完全二叉树一致 <ul><li>只有最下面一层不满</li><li>树高决定了折半查找时间复杂度O(logn)</li></ul></li><li>成功节点数n，失败节点数（空链域数）为n+1</li></ul></li><li>折半查找速度大多数情况下比顺序查找快，不是一定</li></ul></li><li>分块查找 ![图片](./第七章 查找-幕布图片-942168-484942.jpg) <ul><li>索引顺序查找</li><li>将查找表分为若干子块 <ul><li>块内无序，块间有序</li></ul></li><li>建立索引表，每个元素是所对应块内元素的最大值</li><li>过程 <ul><li>查找索引表确定块（索引大于等于目标），可用顺序和二分</li><li>块内顺序查找</li></ul></li><li>折半查找索引表时，目标不在索引内，最终low›high，在low所指块中查找</li><li>ASL <ul><li>索引表ASL+块内ASL</li><li>规则情况 <ul><li>长度为n的查找表，均匀分为b块，每块s个记录</li><li>索引顺序 <ul><li>ASL=(b+1)/2+(s+1)/2</li><li>s=sqrt(n)时ASL最小，为sqrt(n)-1</li></ul></li><li>索引二分 <ul><li>ASL=上取整(log2(b+1))+(s+1)/2</li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="树形结构" tabindex="-1">树形结构 <a class="header-anchor" href="#树形结构" aria-label="Permalink to &quot;树形结构&quot;">​</a></h2>',6)),i("ul",null,[l[47]||(l[47]=i("li",null,"二叉排序树",-1)),l[48]||(l[48]=i("li",null,"二叉平衡树",-1)),l[49]||(l[49]=i("li",null,"红黑树",-1)),i("li",null,[o(n,{color:"#DC2D1E"},{default:t(()=>l[0]||(l[0]=[u("B树",-1)])),_:1,__:[0]}),l[31]||(l[31]=u()),o(n,{color:"#75C940"},{default:t(()=>l[1]||(l[1]=[u("多路平衡查找树",-1)])),_:1,__:[1]}),i("ul",null,[l[30]||(l[30]=i("li",null,"所有结点到孩子个数的最大值为阶数，记为m",-1)),i("li",null,[l[20]||(l[20]=u("m阶B树满足的特性 ",-1)),i("ul",null,[i("li",null,[o(n,{color:"#75C940"},{default:t(()=>l[2]||(l[2]=[u("每个结点",-1)])),_:1,__:[2]}),l[6]||(l[6]=u()),o(n,{color:"#FFAF38"},{default:t(()=>l[3]||(l[3]=[u("至多",-1)])),_:1,__:[3]}),l[7]||(l[7]=u(" 有 ",-1)),o(n,{color:"#75C940"},{default:t(()=>l[4]||(l[4]=[u("m棵子树，",-1)])),_:1,__:[4]}),l[8]||(l[8]=u(" 含有 ",-1)),o(n,{color:"#75C940"},{default:t(()=>l[5]||(l[5]=[u("m-1个关键字",-1)])),_:1,__:[5]})]),i("li",null,[l[11]||(l[11]=u("若 ",-1)),o(n,{color:"#75C940"},{default:t(()=>l[9]||(l[9]=[u("根结点",-1)])),_:1,__:[9]}),l[12]||(l[12]=u(" 不是终端结点，则至少有两颗子树 ",-1)),o(n,{color:"#75C940"},{default:t(()=>l[10]||(l[10]=[u("绝对平衡",-1)])),_:1,__:[10]}),l[13]||(l[13]=i("ul",null,[i("li",null,"任意结点子树高度相同")],-1))]),i("li",null,[l[18]||(l[18]=u("除根结点以外所有非叶结点至少m/2向上取整棵子树 ",-1)),i("ul",null,[i("li",null,[o(n,{color:"#FFAF38"},{default:t(()=>l[14]||(l[14]=[u("至少",-1)])),_:1,__:[14]}),l[16]||(l[16]=u()),o(n,{color:"#75C940"},{default:t(()=>l[15]||(l[15]=[u("含有m/2向上取整-1个关键字",-1)])),_:1,__:[15]})]),l[17]||(l[17]=i("li",null,"保证每个结点不会太空，以至于退化成二叉树",-1))])]),l[19]||(l[19]=i("li",null,[u("所有叶节点在同一层次上，不带信息 "),i("ul",null,[i("li",null,"可视为外部结点或查找失败结点"),i("li",null,"实际上这些结点不存在，指向这些结点的指针为空")])],-1))])]),i("li",null,[o(n,{color:"#DC2D1E"},{default:t(()=>l[21]||(l[21]=[u("B树的高度",-1)])),_:1,__:[21]}),l[22]||(l[22]=i("ul",null,[i("li",null,"含n个关键字的m阶B树"),i("li",null,[u("最小高度 "),i("ul",null,[i("li",null,"每个结点尽可能被填满"),i("li",null,"每个结点m-1个关键字"),i("li",null,"有 1+m+m^2+...+m^(h-1)个结点"),i("li",null,"(m-1 )1+m+m^2+...+m^(h-1)=m^h-1")])]),i("li",null,[u("最大高度 ![图片](./第七章 查找-幕布图片-818754-103351.jpg) "),i("ul",null,[i("li",null,"n个关键字的B树必有n+1个叶子结点")])])],-1))]),i("li",null,[o(n,{color:"#40A8F5"},{default:t(()=>l[23]||(l[23]=[u("查找过程",-1)])),_:1,__:[23]})]),i("li",null,[o(n,{color:"#40A8F5"},{default:t(()=>l[24]||(l[24]=[u("插入过程",-1)])),_:1,__:[24]}),i("ul",null,[i("li",null,[l[26]||(l[26]=u("插入新关键字后导致原 ",-1)),o(n,{color:"#FFAF38"},{default:t(()=>l[25]||(l[25]=[u("结点关键字数超过上限",-1)])),_:1,__:[25]}),l[27]||(l[27]=i("ul",null,[i("li",null,"从中间位置 m/2向上取整 处分开"),i("li",null,"分为左右两部分，中间位置关键字插入原结点的父节点中"),i("li",null,"若导致其父节点关键字数超过上限，则父节点也执行该操作")],-1))])])]),i("li",null,[o(n,{color:"#40A8F5"},{default:t(()=>l[28]||(l[28]=[u("删除过程",-1)])),_:1,__:[28]}),l[29]||(l[29]=r("<ul><li>对于非终端结点 <ul><li>可以通过让其直接前驱或直接后继代替其位置转化为删除终端节点</li></ul></li><li>删除关键字在终端结点 <ul><li>直接删除</li><li>兄弟够借 <ul><li>右够 后继和后继的后继依次移动</li><li>左够 前驱和前驱的前驱一次移动</li></ul></li><li>兄弟不够借 <ul><li>与左或右兄弟结点以及父节点结点中的关键字进行合并</li><li>可能会产生连锁反应，要检查父节点，逐层向上</li></ul></li></ul></li></ul>",1))])])]),i("li",null,[l[44]||(l[44]=u("B+树 ",-1)),i("ul",null,[l[41]||(l[41]=i("li",null,"对比分块查找",-1)),l[42]||(l[42]=i("li",null,"应数据库所需而出现",-1)),i("li",null,[l[40]||(l[40]=u("满足的特性 ",-1)),i("ul",null,[l[37]||(l[37]=i("li",null,"每个分支结点最多m棵子树",-1)),l[38]||(l[38]=i("li",null,"非根结点至少有两颗子树，每个分支结点至少有m/2向上取整",-1)),i("li",null,[o(n,{color:"#DC2D1E"},{default:t(()=>l[32]||(l[32]=[u("结点的子树个数与关键字个数相等",-1)])),_:1,__:[32]}),l[33]||(l[33]=i("ul",null,[i("li",null,"B树是插空")],-1))]),l[39]||(l[39]=i("li",null,"所有叶结点包含全部关键字，相邻叶结点按大小顺序相互链接起来",-1)),i("li",null,[l[35]||(l[35]=u("所有分支结点包含它子结点中 ",-1)),o(n,{color:"#FFAF38"},{default:t(()=>l[34]||(l[34]=[u("最大",-1)])),_:1,__:[34]}),l[36]||(l[36]=u(" 的关键字",-1))])])]),l[43]||(l[43]=i("li",null,[u("查找 "),i("ul",null,[i("li",null,[u("从根 "),i("ul",null,[i("li",null,"无论查找成功与否，都要走到最下面一层")])]),i("li",null,[u("顺序查找 "),i("ul",null,[i("li",null,"叶结点从头按索引顺序查找")])])])],-1))])]),i("li",null,[o(n,{color:"#FFAF38"},{default:t(()=>l[45]||(l[45]=[u("B树与B+树的差异",-1)])),_:1,__:[45]}),l[46]||(l[46]=r("<ul><li>分叉和关键字数量 <ul><li>B+树 <ul><li>n个关键字对应n棵子树</li><li>根节点</li><li>其他结点 ![图片](./第七章 查找-幕布图片-915916-936421.jpg)</li></ul></li><li>B树 n个关键字对应n-1棵子树 ![图片](./第七章 查找-幕布图片-660530-341672.jpg)</li></ul></li><li>关键字 <ul><li>B树 各结点中包含的关键字不重复</li><li>B+树 叶节点包含全部关键字</li></ul></li><li>关键字记录 <ul><li>B树 结点中都包含了关键字对应的记录的存储地址</li><li>B+树 叶结点包含关键字记录信息，所有非叶结点仅起了索引作用</li></ul></li><li>查找时 <ul><li>B树查找成功可以停在任意一层</li><li>B+树无论查找成功与否，都要走到最下面一层</li></ul></li><li>![图片](./第七章 查找-幕布图片-707130-89359.jpg)</li></ul>",1))]),l[50]||(l[50]=i("li",null,"扩展应用 ![图片](./第七章 查找-幕布图片-978173-630583.jpg) ![图片](./第七章 查找-幕布图片-30256-959243.jpg)",-1))]),l[55]||(l[55]=i("h2",{id:"散列结构",tabindex:"-1"},[u("散列结构 "),i("a",{class:"header-anchor",href:"#散列结构","aria-label":'Permalink to "散列结构"'},"​")],-1)),i("ul",null,[l[53]||(l[53]=r("<li>基本概念 <ul><li>散列函数</li><li>冲突</li><li>同义词</li><li>散列表</li></ul></li><li>散列函数构造方法 <ul><li>直接定值法 <ul><li>适合关键字分布连续，例如学号</li></ul></li><li>除留余数法 <ul><li>用质数取模，分布更均匀，冲突更少</li><li>取小于等于散列表表长m的最大质数</li></ul></li><li>数字分析法 <ul><li>取关键字数字分布均匀的几位，例如手机号后四位</li></ul></li><li>平方取中法 <ul><li>将关键字平方后取中间和各位都有关系的几位</li></ul></li></ul></li><li>处理冲突的方法 <ul><li>开放定址法 <ul><li>线性探测法 <ul><li>易堆积</li><li>堆积（聚集）：非同义词之间争夺一个地址的情况</li></ul></li><li>平方探测法 <ul><li>避免堆积，但不能探测到散列表上所有单元</li><li>散列表长度m必须为可以表示成4k+3的素数</li></ul></li><li>再散列法 <ul><li>多个散列函数，在第一个散列函数映射的位置产生冲突后采用下一个函数继续进行散列</li></ul></li><li>伪随机序列法</li><li>（删除时不能直接删除，应该做标记，逻辑上删除）</li><li>探测法在超出散列表长度后由于取模的原因，会从另一头继续开始探测</li></ul></li><li>拉链法 <ul><li>不会堆积</li></ul></li></ul></li>",3)),i("li",null,[l[52]||(l[52]=u("性能分析 ",-1)),o(n,{color:"#40A8F5"},{default:t(()=>l[51]||(l[51]=[u("用空间换时间",-1)])),_:1,__:[51]})])]),l[56]||(l[56]=r('<h2 id="效率指标" tabindex="-1">效率指标 <a class="header-anchor" href="#效率指标" aria-label="Permalink to &quot;效率指标&quot;">​</a></h2><ul><li>三因素 <ul><li>散列函数 <ul><li>足够好的散列函数（哈希函数）可以使查找效率达到O(1)</li></ul></li><li>处理冲突方法</li><li>装填因子 <ul><li>表中记录个数/散列表表长</li><li>越大装的越满，越容易产生冲突</li></ul></li></ul></li><li>平均查找长度 <ul><li>成功</li><li>不成功</li><li>探测法</li><li>拉链法</li></ul></li></ul>',2))])}const P=d(A,[["render",T]]);export{_ as __pageData,P as default};
