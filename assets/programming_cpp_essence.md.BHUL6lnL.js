import{_ as e,c as t,o as r,ae as h}from"./chunks/framework.U1Gow_7P.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"programming/cpp/essence.md","filePath":"programming/cpp/essence.md"}'),o={name:"programming/cpp/essence.md"};function i(l,a,n,s,c,d){return r(),t("div",null,a[0]||(a[0]=[h('<h2 id="指针" tabindex="-1">指针 <a class="header-anchor" href="#指针" aria-label="Permalink to &quot;指针&quot;">​</a></h2><h2 id="引用" tabindex="-1">引用 <a class="header-anchor" href="#引用" aria-label="Permalink to &quot;引用&quot;">​</a></h2><h2 id="static关键字" tabindex="-1">static关键字 <a class="header-anchor" href="#static关键字" aria-label="Permalink to &quot;static关键字&quot;">​</a></h2><ul><li>在类中</li><li>local static</li></ul><h2 id="虚函数" tabindex="-1">虚函数 <a class="header-anchor" href="#虚函数" aria-label="Permalink to &quot;虚函数&quot;">​</a></h2><h2 id="纯虚函数" tabindex="-1">纯虚函数 <a class="header-anchor" href="#纯虚函数" aria-label="Permalink to &quot;纯虚函数&quot;">​</a></h2><h2 id="const-关键字-const承诺" tabindex="-1">const 关键字（const承诺 <a class="header-anchor" href="#const-关键字-const承诺" aria-label="Permalink to &quot;const 关键字（const承诺&quot;">​</a></h2><h2 id="在stack和heap上创建对象" tabindex="-1">在stack和heap上创建对象 <a class="header-anchor" href="#在stack和heap上创建对象" aria-label="Permalink to &quot;在stack和heap上创建对象&quot;">​</a></h2><h2 id="new和delete" tabindex="-1">new和delete <a class="header-anchor" href="#new和delete" aria-label="Permalink to &quot;new和delete&quot;">​</a></h2><h2 id="this" tabindex="-1">this <a class="header-anchor" href="#this" aria-label="Permalink to &quot;this&quot;">​</a></h2><h2 id="栈作用域生存期" tabindex="-1">栈作用域生存期 <a class="header-anchor" href="#栈作用域生存期" aria-label="Permalink to &quot;栈作用域生存期&quot;">​</a></h2><h2 id="智能指针" tabindex="-1">智能指针 <a class="header-anchor" href="#智能指针" aria-label="Permalink to &quot;智能指针&quot;">​</a></h2><h2 id="stack和heap" tabindex="-1">stack和heap <a class="header-anchor" href="#stack和heap" aria-label="Permalink to &quot;stack和heap&quot;">​</a></h2><h2 id="函数指针" tabindex="-1">函数指针 <a class="header-anchor" href="#函数指针" aria-label="Permalink to &quot;函数指针&quot;">​</a></h2><h2 id="lambda" tabindex="-1">lambda <a class="header-anchor" href="#lambda" aria-label="Permalink to &quot;lambda&quot;">​</a></h2><h2 id="线程" tabindex="-1">线程 <a class="header-anchor" href="#线程" aria-label="Permalink to &quot;线程&quot;">​</a></h2><h2 id="排序" tabindex="-1">排序 <a class="header-anchor" href="#排序" aria-label="Permalink to &quot;排序&quot;">​</a></h2><h2 id="类型双关" tabindex="-1">类型双关 <a class="header-anchor" href="#类型双关" aria-label="Permalink to &quot;类型双关&quot;">​</a></h2><h2 id="虚析构函数" tabindex="-1">虚析构函数 <a class="header-anchor" href="#虚析构函数" aria-label="Permalink to &quot;虚析构函数&quot;">​</a></h2>',19)]))}const m=e(o,[["render",i]]);export{b as __pageData,m as default};
