import{_ as a,C as d,c as s,o as e,ae as r,j as i,G as o,a as u,w as n}from"./chunks/framework.B8KKhRA6.js";const b=JSON.parse('{"title":"第六章 图","description":"","frontmatter":{},"headers":[],"relativePath":"programming/data_structure/chap6.md","filePath":"programming/data_structure/chap6.md"}'),_={name:"programming/data_structure/chap6.md"},f={id:"性质",tabindex:"-1"},m={id:"基本操作",tabindex:"-1"},D={id:"遍历",tabindex:"-1"},T={id:"应用",tabindex:"-1"};function p(E,l,C,A,P,V){const t=d("font");return e(),s("div",null,[l[22]||(l[22]=r('<h1 id="第六章-图" tabindex="-1">第六章 图 <a class="header-anchor" href="#第六章-图" aria-label="Permalink to &quot;第六章 图&quot;">​</a></h1><h2 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h2><ul><li>G=(V,E) V顶点集 E边集 <ul><li>V(G) 图G中顶点的有限非空集</li><li>E(G) 图G中顶点之间关系集</li><li>|V|图G中顶点个数 <ul><li>也叫图G的阶</li></ul></li><li>|E|图G中边的条数</li></ul></li><li>图不可为空，因为其顶点集必须非空</li><li>无向图 <ul><li>无向边，简称边 记(v,w)</li><li>w和v互为邻接点</li><li>(v,w)</li><li>度 <ul><li>一条边同时为两个顶点提供一个入度和一个出度</li><li>全部顶点的度为边数二倍</li></ul></li></ul></li><li>有向图 <ul><li>有向边，也叫做弧 记&lt;v,w&gt;</li><li>v弧尾，w弧头</li><li>&lt;v,w&gt;：v到w的弧（v邻接到w）</li><li>度 <ul><li>出度</li><li>入度</li><li>一条边为一个顶点提供一个入度同时为另一个节点提供出度</li><li>入度=出度=边数</li></ul></li></ul></li><li>边的权 <ul><li>权，边上含有意义的值</li><li>带权图 也称网，边上有权的图</li><li>带权路径长度 <ul><li>途中某一路径的所有边的权的和</li></ul></li></ul></li><li>点到点关系 <ul><li>路径 回路 简单路径 简单回路 <ul><li>简单，路径上顶点不重复</li><li>回路，路径上第一个顶点和最后一个顶点相同</li></ul></li><li>路径长度，路径上边的数目</li><li>最短路径 点到点距离 <ul><li>距离为最短路径长度</li></ul></li><li>无向图顶点连通性 <ul><li>联通</li><li>联通图</li><li>联通分量 极大联通子图</li></ul></li><li>有向图顶点连通性 <ul><li>强联通</li><li>强联通图</li><li>强联通分量 极大强联通子图</li></ul></li></ul></li><li>图的局部 <ul><li>子图 <ul><li>满足图定义</li><li>边集，点集都为某一个图的子集，为该图的子图</li></ul></li><li>生成子图 <ul><li>点集和某一个图的点集相同的子图，为该图的生成子图</li></ul></li><li>联通分量 <ul><li>极大联通子图</li></ul></li><li>强联通分量 <ul><li>极大强联通子图</li></ul></li><li>联通无向图的生成树 <ul><li>包含全部顶点的极小联通子图</li><li>n个顶点的图，其生成树有n-1条边</li></ul></li><li>非联通无向图的生成森林 <ul><li>各联通分量的生成树</li></ul></li></ul></li><li>特殊形态的图 <ul><li>完全图 <ul><li>n(n-1)/2条边的无向图</li><li>n(n-1)条弧的有向图</li></ul></li><li>稠密图 稀疏图 <ul><li>边数的多少来划分</li></ul></li><li>树 森林</li><li>有向树 <ul><li>一个顶点入度为0，其余顶点入度均为1的有向图</li></ul></li></ul></li><li>边数问题 <ul><li>图 n个顶点 <ul><li>边数小于n-1则为非联通</li></ul></li><li>非联通图 n个顶点 <ul><li>边数最多n-1个顶点构成完全图</li></ul></li><li>有向强联通图 n个顶点 <ul><li>边数最少n条边围成环路</li></ul></li></ul></li></ul>',3)),i("h2",f,[o(t,{color:"#DC2D1E"},{default:n(()=>l[0]||(l[0]=[u("性质")])),_:1,__:[0]}),l[1]||(l[1]=u()),l[2]||(l[2]=i("a",{class:"header-anchor",href:"#性质","aria-label":'Permalink to "<font color=#DC2D1E>性质</font>"'},"​",-1))]),l[23]||(l[23]=i("h2",{id:"存储结构",tabindex:"-1"},[u("存储结构 "),i("a",{class:"header-anchor",href:"#存储结构","aria-label":'Permalink to "存储结构"'},"​")],-1)),i("ul",null,[i("li",null,[o(t,{color:"#40A8F5"},{default:n(()=>l[3]||(l[3]=[u("邻接矩阵")])),_:1,__:[3]}),l[4]||(l[4]=r(" ![图片](./第六章 图-幕布图片-12867-380456.jpg)<ul><li>顺序存储</li><li>表示唯一</li><li>存储顶点之间邻接关系的二维数组</li><li>无向图和有向图表示的区别</li><li>度的求法</li><li>空间复杂度O(n^2)</li><li>适合稠密图</li><li>可以用对称矩阵压缩法压缩</li><li>确定边数需要遍历</li><li>邻接矩阵的n次方[i][j]位置的值代表由i到j的长度为n的结点的路径数目</li></ul>",2))]),i("li",null,[o(t,{color:"#40A8F5"},{default:n(()=>l[5]||(l[5]=[u("邻接表")])),_:1,__:[5]}),l[6]||(l[6]=r(" ![图片](./第六章 图-幕布图片-938971-878830.jpg)<ul><li>顺序存储和链式存储</li><li>表示不唯一 <ul><li>缘于边结点连接顺序任意</li></ul></li><li>顶点表和边表构成</li><li>类比树的孩子表示法</li><li>有向图 <ul><li>空间复杂度</li><li>缺点：求入度需要遍历</li></ul></li><li>无向图 <ul><li>每条边对应两个结点，边结点数必为偶数</li><li>空间复杂度</li></ul></li><li>度求法 <ul><li>顶点表该节点后边表中结点数为出度</li><li>表中所有该节点的边结点数为入度</li></ul></li><li>适合稀疏图</li></ul>",2))]),i("li",null,[o(t,{color:"#40A8F5"},{default:n(()=>l[7]||(l[7]=[u("十字链表 表示有向图")])),_:1,__:[7]}),l[8]||(l[8]=i("ul",null,[i("li",null,"解决有向图入度和入边不好计算")],-1))]),i("li",null,[o(t,{color:"#40A8F5"},{default:n(()=>l[9]||(l[9]=[u("邻接多重表 表示无向图")])),_:1,__:[9]})])]),i("h2",m,[o(t,{color:"#DC2D1E"},{default:n(()=>l[10]||(l[10]=[u("基本操作")])),_:1,__:[10]}),l[11]||(l[11]=u()),l[12]||(l[12]=i("a",{class:"header-anchor",href:"#基本操作","aria-label":'Permalink to "<font color=#DC2D1E>基本操作</font>"'},"​",-1))]),l[24]||(l[24]=i("ul",null,[i("li",null,"理解操作逻辑")],-1)),i("h2",D,[o(t,{color:"#DC2D1E"},{default:n(()=>l[13]||(l[13]=[u("遍历")])),_:1,__:[13]}),l[14]||(l[14]=u()),l[15]||(l[15]=i("a",{class:"header-anchor",href:"#遍历","aria-label":'Permalink to "<font color=#DC2D1E>遍历</font>"'},"​",-1))]),l[25]||(l[25]=i("ul",null,[i("li",null,[i("p",null,"广度优先 BFS")]),i("li",null,[i("p",null,"深度优先 DFS")])],-1)),i("h2",T,[o(t,{color:"#DC2D1E"},{default:n(()=>l[16]||(l[16]=[u("应用")])),_:1,__:[16]}),l[17]||(l[17]=u()),l[18]||(l[18]=i("a",{class:"header-anchor",href:"#应用","aria-label":'Permalink to "<font color=#DC2D1E>应用</font>"'},"​",-1))]),i("ul",null,[l[21]||(l[21]=r("<li>最小生成树 <ul><li>带权连通无向图G的生成树中，权值之和最小的生成树叫做最小生成树</li><li>性质 <ul><li>最小生成树不是唯一的，即树形不唯一；当G中各边权值互不相等时，G的最小生成树唯一</li><li>最小生成树的边的权值之和总是唯一</li><li>最小生成树的边数为定点数减一（树的性质）</li></ul></li><li>算法 <ul><li>Prim 选顶点 <ul><li>适用于边稠密</li><li>时间复杂度O(|V|^2)</li></ul></li><li>Kruskal 选边 <ul><li>适用于边稀疏且顶点较多</li><li>时间复杂度O(|E|log|E|）</li></ul></li></ul></li></ul></li><li>最短路径 <ul><li>BFS <ul><li>无向图的</li></ul></li><li>Dijkstra <ul><li>求解单源最短路径</li><li>辅助数组</li><li>时间复杂度</li><li>空间复杂度</li></ul></li><li>Floyd <ul><li>求解每对顶点间的最短路径</li><li>动态规划思想</li><li>辅助数组</li><li>时间复杂度</li><li>空间复杂度</li></ul></li></ul></li><li>拓扑排序 <ul><li>AOV网</li><li>拓扑排序判断图是否有环最快</li></ul></li>",3)),i("li",null,[o(t,{color:"#DC2D1E"},{default:n(()=>l[19]||(l[19]=[u("关键路径")])),_:1,__:[19]}),l[20]||(l[20]=i("ul",null,[i("li",null,"AOE网")],-1))])])])}const g=a(_,[["render",p]]);export{b as __pageData,g as default};
